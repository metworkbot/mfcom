bootstrap_common: &bootstrap_common
  pull: true
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - mkdir -p /opt/metwork-mfcom-${DRONE_BRANCH}
    - ./bootstrap.sh /opt/metwork-mfcom-${DRONE_BRANCH} /opt/metwork-mfext-$${MFEXT_BRANCH}
    - cat adm/root.mk
    - CACHE_HASH=`/opt/metwork-mfext-$${MFEXT_BRANCH}/bin/_build_cache_hash.sh .`
    - if ! test -f /buildcache/build_mfcom_${DRONE_BRANCH}_$${CACHE_HASH}; then echo $${CACHE_HASH} >.drone_cache; fi
    - env

build_common: &build_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if ! test -f .drone_cache; then echo "step bypass"; exit 0; fi
    - mkdir -p /opt/metwork-mfcom-${DRONE_BRANCH}
    - make
    - make doc
    - rm -Rf html_doc
    - cp -Rf /opt/metwork-mfcom-${DRONE_BRANCH}/html_doc .
    - make test
    - make RELEASE_BUILD=${DRONE_BUILD_NUMBER} rpm
    - mv /opt/metwork-mfcom-${DRONE_BRANCH}/*.rpm .

publish_ci_common: &publish_ci_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if ! test -f .drone_cache; then echo "step bypass"; touch .drone_downstream_bypass; exit 0; fi
    - mkdir -p /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
    - cp *.rpm /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
    - yum -y install createrepo
    - createrepo --update /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}
    - if test "${OS_VERSION}" = "centos6"; then rm -Rf /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfcom; mkdir -p /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfcom ; cp -Rf html_doc/* /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfcom/ ; fi
    - touch /buildcache/build_mfcom_${DRONE_BRANCH}_`cat .drone_cache`
  volumes:
    - /pub:/pub
    - /buildcache:/buildcache

pipeline:
  bootstrap_integration_push:
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    environment:
      - MFEXT_BRANCH=integration
    <<: *bootstrap_common
    volumes:
      - /buildcache:/buildcache
    when:
      event: push
      branch: integration
  bootstrap_integration_pr:
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    environment:
      - MFEXT_BRANCH=integration
    <<: *bootstrap_common
    when:
      event: pull_request
      branch: integration
  bootstrap:
    image: metwork/mfcom-${OS_VERSION}-buildimage:master
    environment:
      - MFEXT_BRANCH=master
    <<: *bootstrap_common
    volumes:
      - /buildcache:/buildcache
    when:
      event: push
      branch: [ master, ci_*, pci_* ]
  build_integration:
    <<: *build_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    when:
      event: [push, pull_request]
      branch: integration
  build:
    <<: *build_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:master
    when:
      event: push
      branch: [ master, ci_*, pci_* ]
  publish_ci_integration:
    <<: *publish_ci_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    when:
      event: push
      branch: integration
  publish_ci:
    <<: *publish_ci_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:master
    when:
      event: push
      branch: [ master, pci_* ]
  trigger:
    image: metwork/drone-downstream-specific-image:${DRONE_BRANCH}
    pull: true
    secrets: [ downstream_server, downstream_token ]
    repositories:
      - metwork-framework/docker-mfxxx-${OS_VERSION}-buildimage@${DRONE_BRANCH}
    when:
      status: success
      event: push
      branch: [ master, integration ]

matrix:
  OS_VERSION:
    - centos6
    - centos7

branches: [ master, integration, ci_*, pci_* ]
